#!/usr/bin/env -S npx ts-node
import { compile } from 'json-schema-to-typescript'
import fs from 'fs';
import _ from 'lodash';
import { JSONSchema4 } from 'json-schema';
import { recursiveListFilesInDirectory, listFilters } from './file-helper';
import path from 'path';
import '../src/global-error-handlers';

const schemaExtension = '.schema.json';

const generateValidatedTypeFile = async (filePath: string) => {
  const dirname = path.dirname(filePath);
  const filename = path.basename(filePath, schemaExtension);
  const newPath = path.join(dirname, `${filename}.d.ts`);

  console.log(`Writing validated type file: ${newPath}`);
  // TODO reference this script in the message
  await fs.promises.writeFile(newPath, `
/* tslint:disable */
/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/
`);

  let state: 'READY' | 'READ' | 'COMPILED' | 'FINISHED' = 'READY';
  try {
    const schema = require(filePath) as JSONSchema4;
    state = 'READ';
    const interfaceName = `I${_.upperFirst(filename)}`;
    const ts = await compile(schema, interfaceName, {
      bannerComment: '',
      cwd: path.dirname(newPath)
    });
    state = 'COMPILED';
    // const defaultTS = `export default ${ts.substring('export '.length)}`;
    // await fs.promises.appendFile(newPath, defaultTS + '\n');
    await fs.promises.appendFile(newPath, `${ts}\n`);
    await fs.promises.appendFile(newPath, `export default ${interfaceName}\n`);
    // NOT used
    state = 'FINISHED';
  } catch (catchOneErr) {
    console.error(`Failed to read "${filePath}" compile it and write it to "${newPath}" at state "${state}"`, catchOneErr);
    throw catchOneErr;
  }
};

(async () => {
  try {
    const filePaths = await recursiveListFilesInDirectory('./src/validations/schemas', [], listFilters.endsWith(schemaExtension, true));
    const promises = filePaths.map(generateValidatedTypeFile);
    await Promise.all(promises);
  } catch (catchAllErr) {
    console.error('Failed', catchAllErr)
  }
})();