
/* tslint:disable */
/**
* This file was automatically generated by json-to-ts.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run generate-schema-types.ts to regenerate this file.
*/
interface RootObject {
  openapi: string;
  info: Info;
  externalDocs: ExternalDocs;
  servers: Server[];
  tags: Tag[];
  paths: Paths;
}

interface Paths {
  '/users/forgot-password': Usersforgotpassword;
  '/users/impersonate': Usersimpersonate;
  '/courses/index': Coursesindex;
  '/courses/{id}': Coursesid;
  '/test/{motmot}/{second}': Testmotmotsecond;
}

interface Testmotmotsecond {
  post: Post4;
}

interface Post4 {
  requestBody: RequestBody4;
  parameters: Parameter[];
  responses: Responses;
}

interface RequestBody4 {
  content: Content5;
}

interface Content5 {
  'application/json': Applicationjson5;
}

interface Applicationjson5 {
  schema: Schema5;
}

interface Schema5 {
  type: string;
  properties: Properties4;
  required: string[];
  additionalProperties: boolean;
}

interface Properties4 {
  tomtom: _8787;
  tomnum: _8787;
  tomdate: Tomdate;
  tomdefaultdate: Tomdefaultdate;
  tomcomplex: Tomcomplex;
}

interface Tomcomplex {
  anyOf: AnyOf[];
}

interface AnyOf {
  type: string;
  enum?: string[];
}

interface Tomdefaultdate {
  type: string;
  format: string;
  tsType: string;
  default: string;
}

interface Tomdate {
  type: string;
  format: string;
  tsType: string;
}

interface Coursesid {
  get: Get;
}

interface Get {
  tags: string[];
  parameters: Parameter[];
  responses: Responses;
}

interface Parameter {
  in: string;
  name: string;
  schema: _8787;
  required: boolean;
}

interface Coursesindex {
  post: Post3;
}

interface Post3 {
  tags: string[];
  requestBody: RequestBody3;
  responses: Responses;
}

interface RequestBody3 {
  content: Content4;
}

interface Content4 {
  'application/json': Applicationjson4;
}

interface Applicationjson4 {
  schema: Schema4;
}

interface Schema4 {
  type: string;
  properties: Properties3;
  required: string[];
  additionalProperties: boolean;
}

interface Properties3 {
  curriculumId: CurriculumId;
  name: _8787;
  code: _8787;
  start: Start;
  end: Start;
  sectionCode: _8787;
  semesterCode: _8787;
  textbooks: _8787;
}

interface Start {
  type: string;
  format: string;
  'ts-type': string;
  description: string;
  example: string;
}

interface CurriculumId {
  type: string;
  description: string;
  example: number;
}

interface Usersimpersonate {
  post: Post2;
}

interface Post2 {
  tags: string[];
  requestBody: RequestBody2;
}

interface RequestBody2 {
  content: Content3;
}

interface Content3 {
  'application/json': Applicationjson3;
}

interface Applicationjson3 {
  schema: Schema3;
}

interface Schema3 {
  type: string;
  properties: Properties2;
  required: string[];
  additionalProperties: boolean;
}

interface Properties2 {
  role: Role;
}

interface Role {
  type: string[];
  description: string;
  example?: any;
}

interface Usersforgotpassword {
  post: Post;
}

interface Post {
  tags: string[];
  requestBody: RequestBody;
  responses: Responses;
}

interface Responses {
  '200': _200;
}

interface _200 {
  content: Content2;
  description: string;
}

interface Content2 {
  'application/json': Applicationjson2;
}

interface Applicationjson2 {
  schema: Schema2;
}

interface Schema2 {
  type: string;
  properties: Properties;
  additionalProperties: boolean;
}

interface Properties {
  '8787': _8787;
}

interface _8787 {
  type: string;
  description: string;
  example: string;
}

interface RequestBody {
  content: Content;
}

interface Content {
  'application/json': Applicationjson;
}

interface Applicationjson {
  schema: Schema;
}

interface Schema {
}

interface Tag {
  description: string;
  externalDocs?: ExternalDocs;
  name: string;
}

interface Server {
  url: string;
}

interface ExternalDocs {
  description: string;
  url: string;
}

interface Info {
  title: string;
  description: string;
  termsOfService: string;
  contact: Contact;
  license: License;
  version: string;
}

interface License {
  name: string;
  url: string;
}

interface Contact {
  email: string;
}

declare const _default: RootObject;
export default _default;